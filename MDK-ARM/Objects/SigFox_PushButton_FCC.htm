<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SigFox_PushButton_FCC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SigFox_PushButton_FCC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat Feb 18 07:51:14 2017
<BR><P>
<H3>Maximum Stack Usage =        712 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ST_SIGFOX_API_send_frame &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_send_frame &rArr; MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ad]">[Anonymous Symbol]</a>
 <LI><a href="#[c5]">[Anonymous Symbol]</a>
 <LI><a href="#[15d]">[Anonymous Symbol]</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[55]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[45]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">HardFault_Handler</a><BR>
 <LI><a href="#[103]">[Anonymous Symbol]</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[103]">[Anonymous Symbol]</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[55]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[52]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[53]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[54]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4e]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4f]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[50]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4c]">FLASH_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5]">HTS221_H_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1]">HTS221_H_DeInit</a> from hts221_driver_hl.o(i.HTS221_H_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[c]">HTS221_H_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[6]">HTS221_H_Get_Hum</a> from hts221_driver_hl.o(i.HTS221_H_Get_Hum) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[7]">HTS221_H_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[4]">HTS221_H_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[0]">HTS221_H_Init</a> from hts221_driver_hl.o(i.HTS221_H_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[a]">HTS221_H_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[3]">HTS221_H_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[2]">HTS221_H_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[8]">HTS221_H_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[9]">HTS221_H_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[b]">HTS221_H_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[12]">HTS221_T_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[e]">HTS221_T_DeInit</a> from hts221_driver_hl.o(i.HTS221_T_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19]">HTS221_T_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14]">HTS221_T_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[13]">HTS221_T_Get_Temp</a> from hts221_driver_hl.o(i.HTS221_T_Get_Temp) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[11]">HTS221_T_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[d]">HTS221_T_Init</a> from hts221_driver_hl.o(i.HTS221_T_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17]">HTS221_T_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[10]">HTS221_T_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[f]">HTS221_T_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[15]">HTS221_T_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[16]">HTS221_T_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[18]">HTS221_T_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[45]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5b]">I2C1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5c]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[62]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3b]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[34]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[37]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[35]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3c]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3a]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[36]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3e]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[42]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[41]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3d]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3f]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[38]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[39]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[40]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1f]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1b]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[26]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[21]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[20]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1e]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1a]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[24]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1d]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1c]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[22]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[23]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[25]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2c]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[28]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[33]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2e]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2d]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2b]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[27]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[31]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2a]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[29]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2f]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[30]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[32]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[56]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[44]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4a]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[47]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4d]">RCC_CRS_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[61]">RNG_LPUART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4b]">RTC_IRQHandler</a> from st_lowlevel_nucleo.o(i.RTC_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[43]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5d]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5e]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[69]">SPI_DMAError</a> from stm32l0xx_hal_spi.o(i.SPI_DMAError) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6a]">SPI_DMAHalfReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[67]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6b]">SPI_DMAReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[68]">SPI_DMATransmitReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[46]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[48]">SysTick_Handler</a> from sdk_eval_timers.o(i.SysTick_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[59]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5a]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[57]">TIM2_IRQHandler</a> from st_lowlevel_nucleo.o(i.TIM2_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[58]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[51]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5f]">USART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[60]">USART2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[63]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[49]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[6d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[6c]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[64]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[193]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[280]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[281]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[282]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[283]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[284]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[43]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ST_SIGFOX_API_open</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, st_sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ST_SIGFOX_API_open &rArr; SIGFOX_API_open &rArr; MANUF_API_get_nv_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>ST_SIGFOX_API_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_close
</UL>

<P><STRONG><a name="[74]"></a>ST_SIGFOX_API_send_frame</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, st_sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ST_SIGFOX_API_send_frame &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_send_frame &rArr; MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>ST_SIGFOX_API_send_bit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_bit
</UL>

<P><STRONG><a name="[78]"></a>ST_SIGFOX_API_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST_SIGFOX_API_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>ST_SIGFOX_API_set_std_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, st_sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ST_SIGFOX_API_set_std_config &rArr; SIGFOX_API_set_std_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_set_std_config
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[285]"></a>ST_SIGFOX_API_get_std_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st_sigfox_api.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>ST_SIGFOX_API_get_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_version
</UL>

<P><STRONG><a name="[7e]"></a>ST_SIGFOX_API_get_info</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_info
</UL>

<P><STRONG><a name="[80]"></a>S2LPRadioSearchDatarateME</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = S2LPRadioSearchDatarateME &rArr; S2LPRadioComputeDatarate &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDatarate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[8d]"></a>S2LPRadioSearchFreqDevME</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetRefDiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyDev
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[93]"></a>S2LPRadioSearchChannelBwME</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = S2LPRadioSearchChannelBwME &rArr; S2LPRadioGetDigDiv &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetDigDiv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannelBW
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[85]"></a>S2LPRadioComputeDatarate</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = S2LPRadioComputeDatarate &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetDatarate
</UL>

<P><STRONG><a name="[91]"></a>S2LPRadioComputeFreqDeviation</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetFrequencyDev
</UL>

<P><STRONG><a name="[98]"></a>S2LPRadioComputeChannelFilterBw</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetInfo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetChannelBW
</UL>

<P><STRONG><a name="[99]"></a>S2LPRadioComputeFrequencyBase</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetFrequencyBase
</UL>

<P><STRONG><a name="[9a]"></a>S2LPRadioComputeSynthWord</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = S2LPRadioComputeSynthWord &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[9b]"></a>S2LPRadioComputeChannelSpacingRegValue</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannelSpace
</UL>

<P><STRONG><a name="[9c]"></a>S2LPRadioComputeChannelSpacing</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetChannelSpace
</UL>

<P><STRONG><a name="[9d]"></a>S2LPRadioComputeIF</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = S2LPRadioComputeIF &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[9e]"></a>S2LPRadioSearchWCP</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = S2LPRadioSearchWCP &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[9f]"></a>S2LPRadioInit</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDigDiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchChannelBwME
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetDigDiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRefreshStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[a5]"></a>S2LPRadioGetInfo</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetRefDiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[a6]"></a>S2LPRadioSetSynthWord</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a8]"></a>S2LPRadioGetSynthWord</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[a9]"></a>S2LPRadioSetChannel</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ab]"></a>S2LPRadioGetChannel</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[ac]"></a>S2LPRadioSetRefDiv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[8f]"></a>S2LPRadioGetRefDiv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = S2LPRadioGetRefDiv &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetFrequencyDev
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetFrequencyBase
</UL>

<P><STRONG><a name="[a2]"></a>S2LPRadioSetDigDiv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = S2LPRadioSetDigDiv &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[94]"></a>S2LPRadioGetDigDiv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = S2LPRadioGetDigDiv &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchChannelBwME
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[ae]"></a>S2LPRadioSetChannelSpace</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b0]"></a>S2LPRadioGetChannelSpace</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
</UL>

<P><STRONG><a name="[a4]"></a>S2LPRadioSetFrequencyBase</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = S2LPRadioSetFrequencyBase &rArr; S2LPRadioComputeSynthWord &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchWCP
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetRefDiv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeSynthWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_change_frequency
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[b1]"></a>S2LPRadioGetFrequencyBase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetRefDiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
</UL>

<P><STRONG><a name="[b2]"></a>S2LPRadioSetDatarate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b3]"></a>S2LPRadioGetDatarate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
</UL>

<P><STRONG><a name="[b4]"></a>S2LPRadioSetFrequencyDev</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b5]"></a>S2LPRadioGetFrequencyDev</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetRefDiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
</UL>

<P><STRONG><a name="[b6]"></a>S2LPRadioSetChannelBW</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchChannelBwME
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b7]"></a>S2LPRadioGetChannelBW</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[b8]"></a>S2LPRadioSetModulation</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b9]"></a>S2LPRadioGetModulation</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[da]"></a>S2LPRadioSetXtalFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, S2LP_Radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementComputeXtalFrequency
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[d6]"></a>S2LPRadioGetXtalFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, S2LP_Radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[ba]"></a>S2LPRadioSetMaxPALevel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bc]"></a>S2LPRadioSetPALeveldBm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bf]"></a>S2LPRadioGetPALeveldBm</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[c2]"></a>S2LPRadioSetPALevelMaxIndex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[c3]"></a>S2LPRadioGetPALevelMaxIndex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[c4]"></a>S2LPRadioSetAutoRampingMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c6]"></a>S2LPRadioSetManualRampingMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c7]"></a>S2LPRadioCalibrationVco</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[c8]"></a>S2LPRadioSetTxCalibVcoAmpWord</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[286]"></a>S2LPRadioSetRxCalibVcoAmpWord</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>S2LPRadioSetTxCalibVcoFreqWord</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[cb]"></a>S2LPRadioSetRxCalibVcoFreqWord</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[cc]"></a>S2LPRadioAfcInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[cd]"></a>S2LPRadioGetAfcInfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[ce]"></a>S2LPRadioSetIsiEqualizationMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[cf]"></a>S2LPRadioGetIsiEqualizationMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[d0]"></a>S2LPRadioSymClkRecoverInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[d1]"></a>S2LPRadioGetSymClkRecoverInfo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[a1]"></a>S2LPRefreshStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, S2LP_Types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = S2LPRefreshStatus &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_change_frequency
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[234]"></a>ST_MANUF_Timer_CB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_manuf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>ST_MANUF_S2LP_Exti_CB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_manuf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[117]"></a>MANUF_API_malloc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, st_manuf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[118]"></a>MANUF_API_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_close
</UL>

<P><STRONG><a name="[d2]"></a>MANUF_API_get_voltage_temperature</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MANUF_API_get_voltage_temperature
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GetVoltage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GetTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[d5]"></a>MANUF_API_rf_init</STRONG> (Thumb, 544 bytes, Stack size 72 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Shutdown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetXtalFrequency
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicSetPayloadLength
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetTxMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostEmptyThresholdTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetXtalFrequency
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[e0]"></a>MANUF_API_rf_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MANUF_API_rf_stop &rArr; ST_LOWLEVEL_CmdStrobe &rArr; SdkEvalSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Shutdown
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_close
</UL>

<P><STRONG><a name="[e1]"></a>MANUF_API_rf_send</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MANUF_API_rf_send &rArr; S2LPGpioInit &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteFifo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_SpiRaw
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPCmdStrobeCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[e7]"></a>MANUF_API_delay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MANUF_API_delay &rArr; ST_LOWLEVEL_Delay &rArr; SdkEvalTimersTimConfig &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>

<P><STRONG><a name="[e8]"></a>MANUF_API_change_frequency</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MANUF_API_change_frequency &rArr; S2LPRadioSetFrequencyBase &rArr; S2LPRadioComputeSynthWord &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRefreshStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_change_frequency
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[e9]"></a>MANUF_API_aes_128_cbc_encrypt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MANUF_API_aes_128_cbc_encrypt &rArr; ST_LOWLEVEL_Encrypt &rArr; enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
</UL>

<P><STRONG><a name="[eb]"></a>MANUF_API_get_nv_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MANUF_API_get_nv_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_NVMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[ed]"></a>MANUF_API_set_nv_mem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MANUF_API_set_nv_mem &rArr; ST_LOWLEVEL_NVMWrite &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_NVMWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[11f]"></a>MANUF_API_get_rssi</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st_manuf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[ef]"></a>MANUF_API_wait_frame</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MANUF_API_wait_frame &rArr; ST_LOWLEVEL_WaitForInterrupt &rArr; ST_LOWLEVEL_SetSysClock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WaitForInterrupt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadFifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqGetStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoReadNumberBytesRxFifo
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[175]"></a>MANUF_API_wait_for_clear_channel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st_manuf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[f5]"></a>MANUF_API_timer_start_carrier_sense</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MANUF_API_timer_start_carrier_sense &rArr; ST_LOWLEVEL_TimerStart &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[f7]"></a>MANUF_API_timer_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MANUF_API_timer_start &rArr; ST_LOWLEVEL_TimerStart &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[f8]"></a>MANUF_API_timer_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MANUF_API_timer_stop &rArr; ST_LOWLEVEL_TimerStop &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[fa]"></a>MANUF_API_timer_stop_carrier_sense</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MANUF_API_timer_stop_carrier_sense &rArr; ST_LOWLEVEL_TimerStop &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[fb]"></a>MANUF_API_timer_wait_for_end</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MANUF_API_timer_wait_for_end &rArr; ST_LOWLEVEL_WaitForInterrupt &rArr; ST_LOWLEVEL_SetSysClock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WaitForInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[fd]"></a>ST_MANUF_report_CB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_report_test_result
</UL>

<P><STRONG><a name="[fc]"></a>MANUF_API_report_test_result</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st_manuf_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MANUF_report_CB
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
</UL>

<P><STRONG><a name="[287]"></a>ST_MANUF_API_get_version</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>VENDOR_continous_wave</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, st_manuf_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Shutdown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetXtalFrequency
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetTxMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetXtalFrequency
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>

<P><STRONG><a name="[288]"></a>VENDOR_smps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>ST_MANUF_API_gpio_irq_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>ST_MANUF_API_gpio_tx_rx_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>ST_MANUF_API_gpio_rx_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>ST_MANUF_API_gpio_tx_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>ST_MANUF_API_reduce_output_power</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>ST_MANUF_API_set_xtal_freq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_manuf_api.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>ST_MANUF_API_set_freq_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_manuf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>l40</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l36
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l32
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l20
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_encrypt
</UL>

<P><STRONG><a name="[111]"></a>l43</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l43 &rArr; l30 &rArr; l35
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l42
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l32
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l30
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
</UL>

<P><STRONG><a name="[114]"></a>l38</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asfd32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
</UL>

<P><STRONG><a name="[112]"></a>enc_utils_retrieve_data</STRONG> (Thumb, 276 bytes, Stack size 96 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = enc_utils_retrieve_data &rArr; EepromRead &rArr; EepromWaitEndWriteOperation &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l43
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l38
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_set_public_key
</UL>

<P><STRONG><a name="[115]"></a>enc_utils_encrypt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l40
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Encrypt
</UL>

<P><STRONG><a name="[116]"></a>enc_utils_set_public_key</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, asfd32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
</UL>

<P><STRONG><a name="[71]"></a>SIGFOX_API_open</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIGFOX_API_open &rArr; MANUF_API_get_nv_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_malloc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_nv_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_open
</UL>

<P><STRONG><a name="[73]"></a>SIGFOX_API_close</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_stop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_free
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_close
</UL>

<P><STRONG><a name="[75]"></a>SIGFOX_API_send_frame</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = SIGFOX_API_send_frame &rArr; SIGFOX_INT_send_frame &rArr; MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_send_frame
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_bit
</UL>

<P><STRONG><a name="[77]"></a>SIGFOX_API_send_bit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_send_bit
</UL>

<P><STRONG><a name="[11c]"></a>SIGFOX_API_send_outofband</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
</UL>

<P><STRONG><a name="[7d]"></a>SIGFOX_API_get_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_get_version
</UL>

<P><STRONG><a name="[79]"></a>SIGFOX_API_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sigfox_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_reset
</UL>

<P><STRONG><a name="[7b]"></a>SIGFOX_API_set_std_config</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_API_set_std_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_set_std_config
</UL>

<P><STRONG><a name="[11d]"></a>SIGFOX_API_test_mode</STRONG> (Thumb, 1460 bytes, Stack size 48 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_outofband
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_PN_next_pn
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_min
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_report_test_result
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_rssi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_change_frequency
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>

<P><STRONG><a name="[7f]"></a>SIGFOX_API_get_info</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_get_info
</UL>

<P><STRONG><a name="[e2]"></a>S2LPCmdStrobeCommand</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, S2LP_Commands.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = S2LPCmdStrobeCommand &rArr; ST_LOWLEVEL_CmdStrobe &rArr; SdkEvalSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
</UL>

<P><STRONG><a name="[f3]"></a>S2LPFifoReadNumberBytesRxFifo</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S2LPFifoReadNumberBytesRxFifo &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
</UL>

<P><STRONG><a name="[28f]"></a>S2LPFifoReadNumberBytesTxFifo</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>S2LPFifoSetAlmostFullThresholdRx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[125]"></a>S2LPFifoGetAlmostFullThresholdRx</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[127]"></a>S2LPFifoSetAlmostEmptyThresholdRx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[290]"></a>S2LPFifoGetAlmostEmptyThresholdRx</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>S2LPFifoSetAlmostFullThresholdTx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[129]"></a>S2LPFifoGetAlmostFullThresholdTx</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[dc]"></a>S2LPFifoSetAlmostEmptyThresholdTx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S2LPFifoSetAlmostEmptyThresholdTx &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[12a]"></a>S2LPFifoGetAlmostEmptyThresholdTx</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[12b]"></a>S2LPFifoMuxRxFifoIrqEnable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e4]"></a>S2LPGpioInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S2LPGpioInit &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
</UL>

<P><STRONG><a name="[12d]"></a>S2LPGpioSetLevel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[12f]"></a>S2LPGpioGetLevel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[130]"></a>S2LPGpioIrqDeInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[131]"></a>S2LPGpioIrqInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[f0]"></a>S2LPGpioIrqConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, S2LP_Gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = S2LPGpioIrqConfig &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
</UL>

<P><STRONG><a name="[133]"></a>S2LPGpioIrqGetMask</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[f1]"></a>S2LPGpioIrqGetStatus</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S2LPGpioIrqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
</UL>

<P><STRONG><a name="[135]"></a>S2LPGpioIrqClearStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[136]"></a>S2LPGpioIrqCheckFlag</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[137]"></a>S2LPGetPacketFormat</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusGetSubmode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[13a]"></a>S2LPSetPreambleLength</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[13c]"></a>S2LPGetPreambleLength</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusGetInfo
</UL>

<P><STRONG><a name="[13d]"></a>S2LPSetSyncLength</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[13e]"></a>S2LPGetSyncLength</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[13f]"></a>S2LPPacketHandlerWhitening</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[140]"></a>S2LPPacketHandlerFec</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[141]"></a>S2LPPacketHandlerManchester</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[143]"></a>S2LPPacketHandler3OutOf6</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[144]"></a>S2LPSetSyncWords</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[146]"></a>S2LPGetSyncWords</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[147]"></a>S2LPPktCommonFilterOnCrc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S2LPPktCommonFilterOnCrc &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicInit
</UL>

<P><STRONG><a name="[148]"></a>S2LPGetReceivedDestinationAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[291]"></a>S2LPGetReceivedSourceAddress</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>S2LPGetMyAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[14b]"></a>S2LPGetBroadcastAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[14c]"></a>S2LPGetMulticastAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[14d]"></a>S2LPGetRxSourceMask</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[14e]"></a>S2LPGetRxSourceReferenceAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[14f]"></a>S2LPSetRxSourceMask</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[292]"></a>S2LPSetRxSourceReferenceAddress</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>S2LPSetBroadcastAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[152]"></a>S2LPSetMulticastAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[153]"></a>S2LPSetMyAddress</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[154]"></a>S2LPPacketHandlerSetRxMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[155]"></a>S2LPPacketHandlerGetRxMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[db]"></a>S2LPPacketHandlerSetTxMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S2LPPacketHandlerSetTxMode &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[156]"></a>S2LPPacketHandlerGetTxMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[157]"></a>S2LPPacketHandlerGetTransmittedSeqNumber</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[158]"></a>S2LPPacketHandlerSetExtendedLenField</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[159]"></a>S2LPPacketHandlerSwap4FSKSymbol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[15a]"></a>S2LPPacketHandlerSwapFifoEndianess</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[15b]"></a>S2LPPacketHandlerSwapPreamblePattern</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[15c]"></a>S2LPPacketHandlerSetVariableLength</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[15e]"></a>S2LPPacketHandlerSetCrcMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[15f]"></a>S2LPPacketHandlerGetCrcMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[160]"></a>S2LPPacketHandlerSelectSecondarySync</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[161]"></a>S2LPPacketHandlerSetAutoPcktFilter</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[162]"></a>S2LPPacketHandlerSetRxPersistentMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[163]"></a>S2LPPacketHandlerSetSrcAddrFlt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[164]"></a>S2LPSetDualSyncWords</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>

<P><STRONG><a name="[165]"></a>S2LPGetDualSyncWords</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[de]"></a>S2LPPktBasicInit</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, S2LP_PktBasic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = S2LPPktBasicInit &rArr; S2LPPktCommonFilterOnCrc &rArr; [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetSubmode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktCommonFilterOnCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[167]"></a>S2LPPktBasicGetInfo</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[168]"></a>S2LPPktBasicAddressesInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[169]"></a>S2LPPktBasicGetAddressesInfo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[16a]"></a>S2LPPktBasicSetFormat</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetSubmode
</UL>

<P><STRONG><a name="[16b]"></a>S2LPPktBasicAddressField</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[16d]"></a>S2LPPktBasicGetAddressField</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = S2LPPktBasicGetAddressField &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicSetPayloadLength
</UL>

<P><STRONG><a name="[df]"></a>S2LPPktBasicSetPayloadLength</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S2LPPktBasicSetPayloadLength &rArr; S2LPPktBasicGetAddressField &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicGetAddressField
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[16e]"></a>S2LPPktBasicGetPayloadLength</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[293]"></a>S2LPPktBasicGetReceivedPktLength</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>SIGFOX_DECODE_decode_frame</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, sigfox_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SIGFOX_DECODE_decode_frame &rArr; SIGFOX_HMAC_compute_aes &rArr; MANUF_API_aes_128_cbc_encrypt &rArr; ST_LOWLEVEL_Encrypt &rArr; enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CRC_crc8
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[121]"></a>SIGFOX_INT_dc_lbt_channel_pn_max</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sigfox_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
</UL>

<P><STRONG><a name="[120]"></a>SIGFOX_INT_dc_lbt_channel_pn_min</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sigfox_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
</UL>

<P><STRONG><a name="[11a]"></a>SIGFOX_INT_send_frame</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = SIGFOX_INT_send_frame &rArr; MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_SCRAMB_compute
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_change_frequency
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_for_clear_channel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_stop_carrier_sense
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_start_carrier_sense
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_outofband
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>

<P><STRONG><a name="[119]"></a>SIGFOX_INT_build_frame</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SIGFOX_INT_build_frame &rArr; SIGFOX_HMAC_compute_aes &rArr; MANUF_API_aes_128_cbc_encrypt &rArr; ST_LOWLEVEL_Encrypt &rArr; enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CRC_crc16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_voltage_temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_outofband
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>

<P><STRONG><a name="[11b]"></a>SIGFOX_INT_receive_frame</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SIGFOX_INT_receive_frame &rArr; MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_change_frequency
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_wait_for_end
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>

<P><STRONG><a name="[11e]"></a>SIGFOX_PN_next_pn</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sigfox_pn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SIGFOX_PN_next_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_test_mode
</UL>

<P><STRONG><a name="[179]"></a>S2LPPktWMbusInit</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetPostamble
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetFormat
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncWords
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncLength
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetPreambleLength
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktCommonFilterOnCrc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerManchester
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandler3OutOf6
</UL>

<P><STRONG><a name="[17c]"></a>S2LPPktWMbusGetInfo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusGetPostamble
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetPreambleLength
</UL>

<P><STRONG><a name="[17a]"></a>S2LPPktWMbusSetFormat</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[17b]"></a>S2LPPktWMbusSetPostamble</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
</UL>

<P><STRONG><a name="[17d]"></a>S2LPPktWMbusGetPostamble</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusGetInfo
</UL>

<P><STRONG><a name="[166]"></a>S2LPPktWMbusSetSubmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, S2LP_PktWMbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicSetFormat
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicInit
</UL>

<P><STRONG><a name="[138]"></a>S2LPPktWMbusGetSubmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetPacketFormat
</UL>

<P><STRONG><a name="[17f]"></a>S2LPPktWMbusSetPayloadLength</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>

<P><STRONG><a name="[180]"></a>S2LPPktWMbusGetPayloadLength</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>

<P><STRONG><a name="[178]"></a>SIGFOX_CRC_crc16</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, sigfox_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_CRC_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[172]"></a>SIGFOX_CRC_crc8</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, sigfox_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_CRC_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
</UL>

<P><STRONG><a name="[173]"></a>SIGFOX_HMAC_compute_aes</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sigfox_hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SIGFOX_HMAC_compute_aes &rArr; MANUF_API_aes_128_cbc_encrypt &rArr; ST_LOWLEVEL_Encrypt &rArr; enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_aes_128_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[177]"></a>SIGFOX_SCRAMB_compute</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sigfox_scramb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIGFOX_SCRAMB_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchWCP
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchChannelBwME
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStart
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_min
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchChannelBwME
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchChannelBwME
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqDeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l42
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l36
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[294]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[295]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_SCRAMB_compute
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l43
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l40
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_DeInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_DeInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_DeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetPALeveldBm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetPALeveldBm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeSynthWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeSynthWord
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[25f]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[298]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetPALeveldBm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeSynthWord
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeSynthWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeIF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetPALeveldBm
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[299]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[29a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[29b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[185]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[18b]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[18a]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[191]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[29e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2a1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>Appli_Exti_CB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.Appli_Exti_CB))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[198]"></a>BSP_HUMIDITY_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_HUMIDITY_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>BSP_HUMIDITY_Get_Hum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[205]"></a>BSP_HUMIDITY_Get_Instance</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Instance))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[19a]"></a>BSP_HUMIDITY_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BSP_HUMIDITY_Init &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>BSP_HUMIDITY_IsInitialized</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[277]"></a>BSP_HUMIDITY_Sensor_Disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>BSP_HUMIDITY_Sensor_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[19e]"></a>BSP_PRESSURE_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_PRESSURE_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>BSP_PRESSURE_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BSP_PRESSURE_Init &rArr; BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[279]"></a>BSP_PRESSURE_Sensor_Disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[271]"></a>BSP_PRESSURE_Sensor_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[1a0]"></a>BSP_TEMPERATURE_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_TEMPERATURE_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25c]"></a>BSP_TEMPERATURE_Get_Instance</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Instance))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
</UL>

<P><STRONG><a name="[25e]"></a>BSP_TEMPERATURE_Get_Temp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>BSP_TEMPERATURE_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BSP_TEMPERATURE_Init &rArr; BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>BSP_TEMPERATURE_IsInitialized</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
</UL>

<P><STRONG><a name="[278]"></a>BSP_TEMPERATURE_Sensor_Disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[270]"></a>BSP_TEMPERATURE_Sensor_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[4e]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>EepromIdentification</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, s2lp_sdk_util.o(i.EepromIdentification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EepromIdentification &rArr; EepromWriteEnable &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkDelayMs
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteEnable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSetSrwd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[113]"></a>EepromRead</STRONG> (Thumb, 108 bytes, Stack size 296 bytes, sdk_eval_eeprom.o(i.EepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = EepromRead &rArr; EepromWaitEndWriteOperation &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[1ad]"></a>EepromSetSrwd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sdk_eval_eeprom.o(i.EepromSetSrwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EepromSetSrwd &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromIdentification
</UL>

<P><STRONG><a name="[1b1]"></a>EepromSpiInitialization</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, sdk_eval_eeprom.o(i.EepromSpiInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EepromSpiInitialization &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>EepromStatus</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sdk_eval_eeprom.o(i.EepromStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EepromStatus &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromIdentification
</UL>

<P><STRONG><a name="[1ae]"></a>EepromWaitEndWriteOperation</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sdk_eval_eeprom.o(i.EepromWaitEndWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EepromWaitEndWriteOperation &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[1ab]"></a>EepromWriteEnable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sdk_eval_eeprom.o(i.EepromWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EepromWriteEnable &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromIdentification
</UL>

<P><STRONG><a name="[1b5]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1b8]"></a>Fatal_Error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.Fatal_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Fatal_Error &rArr; ST_LOWLEVEL_Delay &rArr; SdkEvalTimersTimConfig &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteRegisters
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteFifo
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadRegisters
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadFifo
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiRaw
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiCommandStrobes
</UL>

<P><STRONG><a name="[25a]"></a>HAL_DMA_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>

<P><STRONG><a name="[24b]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_NVMWrite
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_NVMWrite
</UL>

<P><STRONG><a name="[24a]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_NVMWrite
</UL>

<P><STRONG><a name="[1be]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MANUF_S2LP_Exti_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Exti_CB
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_GPIO_Init</STRONG> (Thumb, 312 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WaitForInterrupt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGpioRestore
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSpiInitialization
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[1af]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteRegisters
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteFifo
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadRegisters
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadFifo
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiRaw
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiCommandStrobes
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalExitShutdown
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalEnterShutdown
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSpiInitialization
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteEnable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSetSrwd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[20c]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_I2C_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_msp_template.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[250]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInterruptCmd
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInterruptCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInterruptCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
</UL>

<P><STRONG><a name="[253]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WaitForInterrupt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_SetSysClock
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1050 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_SetSysClock
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_DeactivateWakeUpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStart
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
</UL>

<P><STRONG><a name="[1da]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[23c]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteRegisters
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteFifo
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadRegisters
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadFifo
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiRaw
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiCommandStrobes
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSpiInitialization
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSpiInitialization
</UL>

<P><STRONG><a name="[1db]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[23f]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[23d]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteEnable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSetSrwd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteRegisters
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteFifo
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadRegisters
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadFifo
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiRaw
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiCommandStrobes
</UL>

<P><STRONG><a name="[240]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[23e]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1de]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
</UL>

<P><STRONG><a name="[1df]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[251]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
</UL>

<P><STRONG><a name="[243]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
</UL>

<P><STRONG><a name="[252]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
</UL>

<P><STRONG><a name="[244]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_UART_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[1e8]"></a>HTS221_Activate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>

<P><STRONG><a name="[1ed]"></a>HTS221_DeActivate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[1ee]"></a>HTS221_Get_DataStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_DRDY_Status
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_DRDY_Status
</UL>

<P><STRONG><a name="[1ef]"></a>HTS221_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>

<P><STRONG><a name="[1f0]"></a>HTS221_Get_Humidity</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, hts221_driver.o(i.HTS221_Get_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[1f3]"></a>HTS221_Get_Odr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>

<P><STRONG><a name="[1f4]"></a>HTS221_Get_Temperature</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, hts221_driver.o(i.HTS221_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[1e9]"></a>HTS221_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>

<P><STRONG><a name="[1fd]"></a>HTS221_Set_BduMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_BduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Set_BduMode &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[201]"></a>HTS221_Set_Odr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>

<P><STRONG><a name="[1ea]"></a>HTS221_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>

<P><STRONG><a name="[1ff]"></a>HTS221_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hts221_driver.o(i.HTS221_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTS221_assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>

<P><STRONG><a name="[45]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[21d]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[21f]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[214]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[213]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[215]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[221]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[222]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>

<P><STRONG><a name="[223]"></a>LPS22HB_Get_RawPressure</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>

<P><STRONG><a name="[224]"></a>LPS22HB_Get_RawTemperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>

<P><STRONG><a name="[225]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>

<P><STRONG><a name="[21e]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>

<P><STRONG><a name="[19c]"></a>LPS22HB_Sensor_IO_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.LPS22HB_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[22c]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[22b]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[216]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[217]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[218]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[219]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[21c]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[21a]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[21b]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[229]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[22a]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[228]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>

<P><STRONG><a name="[227]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[233]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>

<P><STRONG><a name="[44]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RTC_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RTC_IRQHandler &rArr; ST_LOWLEVEL_TimerStart &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MANUF_Timer_CB
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStart
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[235]"></a>S2LPManagementComputeXtalFrequency</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s2lp_sdk_util.o(i.S2LPManagementComputeXtalFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S2LPManagementComputeXtalFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetXtalFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[275]"></a>S2LPManagementGetOffset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_sdk_util.o(i.S2LPManagementGetOffset))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>S2LPManagementIdentificationRFBoard</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, s2lp_sdk_util.o(i.S2LPManagementIdentificationRFBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = S2LPManagementIdentificationRFBoard &rArr; EepromRead &rArr; EepromWaitEndWriteOperation &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadRegisters
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalExitShutdown
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalEnterShutdown
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSetHasEeprom
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetHasEeprom
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetXtalFrequency
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementComputeXtalFrequency
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromIdentification
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>ST_LOWLEVEL_CmdStrobe</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_CmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_CmdStrobe &rArr; SdkEvalSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiCommandStrobes
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_change_frequency
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPCmdStrobeCommand
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
</UL>

<P><STRONG><a name="[d8]"></a>ST_LOWLEVEL_Delay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ST_LOWLEVEL_Delay &rArr; SdkEvalTimersTimConfig &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatal_Error
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_delay
</UL>

<P><STRONG><a name="[ea]"></a>ST_LOWLEVEL_Encrypt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_Encrypt &rArr; enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[d4]"></a>ST_LOWLEVEL_GetTemperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_GetTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_voltage_temperature
</UL>

<P><STRONG><a name="[d3]"></a>ST_LOWLEVEL_GetVoltage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_GetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_voltage_temperature
</UL>

<P><STRONG><a name="[d9]"></a>ST_LOWLEVEL_GpioIRQ</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_GpioIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ST_LOWLEVEL_GpioIRQ &rArr; SdkEvalM2SGpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioTriggerRising
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioTriggerFalling
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInterruptCmd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGpioGetPin
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ec]"></a>ST_LOWLEVEL_NVMRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_NVMRead))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_get_nv_mem
</UL>

<P><STRONG><a name="[ee]"></a>ST_LOWLEVEL_NVMWrite</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_NVMWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST_LOWLEVEL_NVMWrite &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_set_nv_mem
</UL>

<P><STRONG><a name="[f4]"></a>ST_LOWLEVEL_ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_ReadFifo &rArr; SdkEvalSpiReadFifo &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
</UL>

<P><STRONG><a name="[8e]"></a>ST_LOWLEVEL_ReadRegisters</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusGetPostamble
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusGetPayloadLength
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicSetFormat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicGetInfo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicGetAddressesInfo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicGetAddressField
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicAddressesInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicAddressField
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncWords
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncLength
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetPreambleLength
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktCommonFilterOnCrc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerWhitening
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSwapPreamblePattern
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSwapFifoEndianess
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSwap4FSKSymbol
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetVariableLength
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetSrcAddrFlt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetRxPersistentMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetRxMode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetExtendedLenField
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetCrcMode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetAutoPcktFilter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSelectSecondarySync
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerManchester
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerGetTxMode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerGetTransmittedSeqNumber
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerGetRxMode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerGetCrcMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerFec
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandler3OutOf6
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetSyncWords
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetSyncLength
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetPreambleLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetPacketFormat
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetDualSyncWords
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqClearStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqCheckFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioGetLevel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostFullThresholdTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostFullThresholdRx
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostEmptyThresholdRx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoMuxRxFifoIrqEnable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetTxMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostEmptyThresholdTx
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetSynthWord
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetRefDiv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALevelMaxIndex
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetModulation
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetMaxPALevel
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetManualRampingMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetIsiEqualizationMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyDev
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDigDiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDatarate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetAutoRampingMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetSynthWord
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetSymClkRecoverInfo
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetRefDiv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetPALeveldBm
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetPALevelMaxIndex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetModulation
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetIsiEqualizationMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetFrequencyDev
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetFrequencyBase
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetDigDiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetDatarate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetChannelSpace
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetChannelBW
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioGetAfcInfo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioCalibrationVco
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioAfcInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRefreshStatus
</UL>

<P><STRONG><a name="[24d]"></a>ST_LOWLEVEL_SetSysClock</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ST_LOWLEVEL_SetSysClock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WaitForInterrupt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>ST_LOWLEVEL_Shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST_LOWLEVEL_Shutdown &rArr; SdkEvalExitShutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalExitShutdown
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalEnterShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
</UL>

<P><STRONG><a name="[e5]"></a>ST_LOWLEVEL_SpiRaw</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_SpiRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_SpiRaw &rArr; SdkEvalSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
</UL>

<P><STRONG><a name="[24f]"></a>ST_LOWLEVEL_TimerCalibration</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_TimerCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ST_LOWLEVEL_TimerCalibration &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>ST_LOWLEVEL_TimerStart</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ST_LOWLEVEL_TimerStart &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_start_carrier_sense
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_start
</UL>

<P><STRONG><a name="[f9]"></a>ST_LOWLEVEL_TimerStop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ST_LOWLEVEL_TimerStop &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_stop_carrier_sense
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_stop
</UL>

<P><STRONG><a name="[f2]"></a>ST_LOWLEVEL_WaitForInterrupt</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_WaitForInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ST_LOWLEVEL_WaitForInterrupt &rArr; ST_LOWLEVEL_SetSysClock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGpioRestore
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_SetSysClock
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_timer_wait_for_end
</UL>

<P><STRONG><a name="[e3]"></a>ST_LOWLEVEL_WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_WriteFifo &rArr; SdkEvalSpiWriteFifo &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_send
</UL>

<P><STRONG><a name="[a3]"></a>ST_LOWLEVEL_WriteRegisters</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st_lowlevel_nucleo.o(i.ST_LOWLEVEL_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetPostamble
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetPayloadLength
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetFormat
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicSetFormat
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicAddressesInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncWords
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetDualSyncWords
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetCrcMode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioSetLevel
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VENDOR_continous_wave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_rf_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetSynthWord
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyDev
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyBase
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDatarate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannelSpace
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannelBW
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioCalibrationVco
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioAfcInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[46]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>SdkDelayMs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdk_eval_timers.o(i.SdkDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromIdentification
</UL>

<P><STRONG><a name="[238]"></a>SdkEvalEnterShutdown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdk_eval_gpio.o(i.SdkEvalEnterShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkEvalEnterShutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Shutdown
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>SdkEvalExitShutdown</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sdk_eval_gpio.o(i.SdkEvalExitShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkEvalExitShutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Shutdown
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[23a]"></a>SdkEvalGetHasEeprom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_eeprom.o(i.SdkEvalGetHasEeprom))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[245]"></a>SdkEvalGpioGetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_eval_gpio.o(i.SdkEvalGpioGetPin))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
</UL>

<P><STRONG><a name="[274]"></a>SdkEvalIdentification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalIdentification))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>SdkEvalLedInit</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, sdk_eval_led.o(i.SdkEvalLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SdkEvalLedInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatal_Error
</UL>

<P><STRONG><a name="[1ba]"></a>SdkEvalLedToggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdk_eval_led.o(i.SdkEvalLedToggle))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatal_Error
</UL>

<P><STRONG><a name="[246]"></a>SdkEvalM2SGpioInit</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, sdk_eval_gpio.o(i.SdkEvalM2SGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SdkEvalM2SGpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioLowPower
</UL>

<P><STRONG><a name="[247]"></a>SdkEvalM2SGpioInterruptCmd</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sdk_eval_gpio.o(i.SdkEvalM2SGpioInterruptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdkEvalM2SGpioInterruptCmd &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
</UL>

<P><STRONG><a name="[249]"></a>SdkEvalM2SGpioTriggerFalling</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdk_eval_gpio.o(i.SdkEvalM2SGpioTriggerFalling))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
</UL>

<P><STRONG><a name="[248]"></a>SdkEvalM2SGpioTriggerRising</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdk_eval_gpio.o(i.SdkEvalM2SGpioTriggerRising))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
</UL>

<P><STRONG><a name="[257]"></a>SdkEvalPushButtonInit</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, sdk_eval_button.o(i.SdkEvalPushButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SdkEvalPushButtonInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[239]"></a>SdkEvalSetHasEeprom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_eeprom.o(i.SdkEvalSetHasEeprom))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[241]"></a>SdkEvalSpiCommandStrobes</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiCommandStrobes))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdkEvalSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_CmdStrobe
</UL>

<P><STRONG><a name="[259]"></a>SdkEvalSpiInit</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SdkEvalSpiInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioLowPower
</UL>

<P><STRONG><a name="[24e]"></a>SdkEvalSpiRaw</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdkEvalSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_SpiRaw
</UL>

<P><STRONG><a name="[24c]"></a>SdkEvalSpiReadFifo</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdkEvalSpiReadFifo &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadFifo
</UL>

<P><STRONG><a name="[237]"></a>SdkEvalSpiReadRegisters</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
</UL>

<P><STRONG><a name="[255]"></a>SdkEvalSpiWriteFifo</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdkEvalSpiWriteFifo &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteFifo
</UL>

<P><STRONG><a name="[256]"></a>SdkEvalSpiWriteRegisters</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, sdk_eval_spi_driver_dma.o(i.SdkEvalSpiWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>

<P><STRONG><a name="[242]"></a>SdkEvalTimersTimConfig</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sdk_eval_timers.o(i.SdkEvalTimersTimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SdkEvalTimersTimConfig &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_Delay
</UL>

<P><STRONG><a name="[196]"></a>Sensor_IO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[1fe]"></a>Sensor_IO_Read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>

<P><STRONG><a name="[202]"></a>Sensor_IO_Write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>

<P><STRONG><a name="[48]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdk_eval_timers.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, st_lowlevel_nucleo.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e5]"></a>UART_CheckIdleState</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e3]"></a>UART_SetConfig</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetConfig &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[260]"></a>USARTConfig</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, com.o(i.USARTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USARTConfig &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a3]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[203]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
</UL>

<P><STRONG><a name="[2a4]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2a5]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[263]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a6]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2a7]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2a8]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[27e]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[190]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[200]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, s2lp_sdk_util.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>

<P><STRONG><a name="[27c]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[264]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[265]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[266]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[267]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[268]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[269]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2a9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2aa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[27a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[272]"></a>exitGpioLowPower</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.exitGpioLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = exitGpioLowPower &rArr; SdkEvalM2SGpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = main &rArr; ST_SIGFOX_API_send_frame &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_send_frame &rArr; MANUF_API_rf_init &rArr; S2LPRadioInit &rArr; S2LPRadioSearchFreqDevME &rArr; S2LPRadioComputeFreqDeviation &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalM2SGpioInit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalIdentification
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalEnterShutdown
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_set_std_config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_send_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_reset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_SIGFOX_API_open
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MANUF_API_set_freq_offset
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_SetSysClock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementIdentificationRFBoard
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementGetOffset
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSpiInitialization
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Sensor_Disable
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_DeInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Sensor_Disable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_DeInit
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Sensor_Disable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_DeInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioLowPower
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatal_Error
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[89]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
</UL>

<P><STRONG><a name="[8b]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchFreqDevME
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSearchDatarateME
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeSynthWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFrequencyBase
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeFreqDeviation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeDatarate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacingRegValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelSpacing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioComputeChannelFilterBw
</UL>

<P><STRONG><a name="[27b]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[273]"></a>trunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trunc.o(i.trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = trunc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
</UL>

<P><STRONG><a name="[209]"></a>vcom_Send</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, com.o(i.vcom_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vcom_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[204]"></a>Humidity_Sensor_Handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(i.Humidity_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Humidity_Sensor_Handler &rArr; floatToInt &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_IsInitialized
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Get_Instance
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Get_Hum
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>Temperature_Sensor_Handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(i.Temperature_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Temperature_Sensor_Handler &rArr; floatToInt &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_IsInitialized
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Get_Temp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Get_Instance
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26e]"></a>enableAllSensors</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.enableAllSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enableAllSensors &rArr; SdkDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkDelayMs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Sensor_Enable
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Sensor_Enable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>floatToInt</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.floatToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = floatToInt &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[1a2]"></a>Configure_RTC_Clock</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, st_lowlevel_nucleo.o(i.Configure_RTC_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerStart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_TimerCalibration
</UL>

<P><STRONG><a name="[254]"></a>setGpioRestore</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, st_lowlevel_nucleo.o(i.setGpioRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setGpioRestore &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WaitForInterrupt
</UL>

<P><STRONG><a name="[1d2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1bc]"></a>DMA_SetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1b7]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[20e]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c6]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1cb]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1c7]"></a>I2C_TransferConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1c8]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1c9]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1cc]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[69]"></a>SPI_DMAError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[6a]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[67]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[6b]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[68]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[1dc]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1e0]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[20a]"></a>I2C_EXPBD_Error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_EXPBD_Error &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[20b]"></a>I2C_EXPBD_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[20d]"></a>I2C_EXPBD_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[195]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
</UL>

<P><STRONG><a name="[19b]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[197]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[19d]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[1eb]"></a>HTS221_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Check_WhoAmI
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Check_WhoAmI
</UL>

<P><STRONG><a name="[1f2]"></a>HTS221_Get_ODR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_ODR
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_ODR
</UL>

<P><STRONG><a name="[1ec]"></a>HTS221_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_WhoAmI
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_WhoAmI
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>

<P><STRONG><a name="[5]"></a>HTS221_H_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>HTS221_H_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_DeInit &rArr; HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_H_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>HTS221_H_Get_Hum</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>HTS221_H_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_H_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_H_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>HTS221_H_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_H_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_H_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_H_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>HTS221_H_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_H_Set_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_H_Set_ODR_Value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HTS221_H_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_H_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f6]"></a>HTS221_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HTS221_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Read_Reg
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Read_Reg
</UL>

<P><STRONG><a name="[1f8]"></a>HTS221_Sensor_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>

<P><STRONG><a name="[1f9]"></a>HTS221_Sensor_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Enable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Enable
</UL>

<P><STRONG><a name="[1fa]"></a>HTS221_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR
</UL>

<P><STRONG><a name="[1fb]"></a>HTS221_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR_Value
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR_Value
</UL>

<P><STRONG><a name="[12]"></a>HTS221_T_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_T_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_DeInit &rArr; HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HTS221_T_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HTS221_T_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HTS221_T_Get_Temp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_T_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HTS221_T_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_T_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HTS221_T_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HTS221_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_T_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HTS221_T_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HTS221_T_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HTS221_T_Set_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HTS221_T_Set_ODR_Value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HTS221_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_T_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1fc]"></a>HTS221_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Write_Reg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Write_Reg
</UL>

<P><STRONG><a name="[20f]"></a>LPS22HB_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
</UL>

<P><STRONG><a name="[3b]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[220]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
</UL>

<P><STRONG><a name="[211]"></a>LPS22HB_Get_Press</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
</UL>

<P><STRONG><a name="[212]"></a>LPS22HB_Get_Temp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
</UL>

<P><STRONG><a name="[210]"></a>LPS22HB_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
</UL>

<P><STRONG><a name="[226]"></a>LPS22HB_Initialize</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[1f]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>LPS22HB_P_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22d]"></a>LPS22HB_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
</UL>

<P><STRONG><a name="[231]"></a>LPS22HB_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[22e]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[22f]"></a>LPS22HB_Set_ODR_When_Disabled</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPS22HB_Set_ODR_When_Disabled &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[230]"></a>LPS22HB_Set_ODR_When_Enabled</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[2c]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LPS22HB_T_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[232]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
</UL>

<P><STRONG><a name="[a7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetSynthWord
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioAfcInit
</UL>

<P><STRONG><a name="[aa]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetTxCalibVcoFreqWord
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetRxCalibVcoFreqWord
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannel
</UL>

<P><STRONG><a name="[ad]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, S2LP_Radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSymClkRecoverInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetRefDiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetModulation
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetIsiEqualizationMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDigDiv
</UL>

<P><STRONG><a name="[af]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetFrequencyDev
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetDatarate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannelSpace
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetChannelBW
</UL>

<P><STRONG><a name="[bb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetMaxPALevel
</UL>

<P><STRONG><a name="[c5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetManualRampingMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetAutoRampingMode
</UL>

<P><STRONG><a name="[c9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Radio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetTxCalibVcoAmpWord
</UL>

<P><STRONG><a name="[e6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, st_manuf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [Anonymous Symbol] &rArr; ST_LOWLEVEL_GpioIRQ &rArr; SdkEvalM2SGpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_GpioIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_wait_frame
</UL>

<P><STRONG><a name="[107]"></a>l20</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l54
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l34
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l21
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l40
</UL>

<P><STRONG><a name="[102]"></a>l21</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l20
</UL>

<P><STRONG><a name="[10c]"></a>l25</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l25
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l30
</UL>

<P><STRONG><a name="[108]"></a>l3</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l3
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l30
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l20
</UL>

<P><STRONG><a name="[10a]"></a>l30</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l30 &rArr; l35
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l35
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l33
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l25
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l43
</UL>

<P><STRONG><a name="[10f]"></a>l32</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = l32
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l43
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l40
</UL>

<P><STRONG><a name="[10b]"></a>l33</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, asfd32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l30
</UL>

<P><STRONG><a name="[109]"></a>l34</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, asfd32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l20
</UL>

<P><STRONG><a name="[106]"></a>l35</STRONG> (Thumb, 1266 bytes, Stack size 40 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l35
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;la
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l30
</UL>

<P><STRONG><a name="[101]"></a>l36</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l36
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l40
</UL>

<P><STRONG><a name="[10e]"></a>l4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asfd32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l43
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l40
</UL>

<P><STRONG><a name="[ff]"></a>l42</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l42
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l43
</UL>

<P><STRONG><a name="[104]"></a>l54</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l54
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;la
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l20
</UL>

<P><STRONG><a name="[105]"></a>la</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asfd32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l54
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l35
</UL>

<P><STRONG><a name="[103]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, asfd32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l21
</UL>

<P><STRONG><a name="[122]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ST_LOWLEVEL_ReadRegisters &rArr; SdkEvalSpiReadRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoReadNumberBytesRxFifo
</UL>

<P><STRONG><a name="[124]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostFullThresholdTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostFullThresholdRx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoMuxRxFifoIrqEnable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoSetAlmostEmptyThresholdTx
</UL>

<P><STRONG><a name="[126]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoGetAlmostFullThresholdTx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoGetAlmostFullThresholdRx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPFifoGetAlmostEmptyThresholdTx
</UL>

<P><STRONG><a name="[12c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioInit
</UL>

<P><STRONG><a name="[12e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioSetLevel
</UL>

<P><STRONG><a name="[132]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqInit
</UL>

<P><STRONG><a name="[134]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_Gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGpioIrqGetMask
</UL>

<P><STRONG><a name="[139]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetPacketFormat
</UL>

<P><STRONG><a name="[13b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ST_LOWLEVEL_WriteRegisters &rArr; SdkEvalSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncLength
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetPreambleLength
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktCommonFilterOnCrc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerWhitening
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSwapPreamblePattern
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSwapFifoEndianess
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSwap4FSKSymbol
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetSrcAddrFlt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetRxPersistentMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetRxMode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetExtendedLenField
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetAutoPcktFilter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSelectSecondarySync
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerFec
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetTxMode
</UL>

<P><STRONG><a name="[142]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerManchester
</UL>

<P><STRONG><a name="[145]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetSyncWords
</UL>

<P><STRONG><a name="[149]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetRxSourceReferenceAddress
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetRxSourceMask
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetReceivedDestinationAddress
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetMyAddress
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetMulticastAddress
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetBroadcastAddress
</UL>

<P><STRONG><a name="[150]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetRxSourceMask
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetMyAddress
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetMulticastAddress
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSetBroadcastAddress
</UL>

<P><STRONG><a name="[15d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, S2LP_PacketHandler.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPacketHandlerSetVariableLength
</UL>

<P><STRONG><a name="[16c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicAddressField
</UL>

<P><STRONG><a name="[16f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PktBasic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_LOWLEVEL_ReadRegisters
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicGetAddressField
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktBasicGetPayloadLength
</UL>

<P><STRONG><a name="[171]"></a>SIGFOX_DECODE_dewhitening</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, sigfox_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIGFOX_DECODE_dewhitening
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
</UL>

<P><STRONG><a name="[176]"></a>SIGFOX_INT_change_frequency</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SIGFOX_INT_change_frequency &rArr; MANUF_API_change_frequency &rArr; S2LPRadioSetFrequencyBase &rArr; S2LPRadioComputeSynthWord &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_receive_frame
</UL>

<P><STRONG><a name="[174]"></a>SIGFOX_INT_compute_channels</STRONG> (Thumb, 780 bytes, Stack size 48 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SIGFOX_INT_compute_channels &rArr; MANUF_API_aes_128_cbc_encrypt &rArr; ST_LOWLEVEL_Encrypt &rArr; enc_utils_encrypt &rArr; l40 &rArr; l20 &rArr; l21 &rArr; [Anonymous Symbol] &rArr;  [Anonymous Symbol] (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_PN_next_pn
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_set_nv_mem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MANUF_API_aes_128_cbc_encrypt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_frame
</UL>

<P><STRONG><a name="[17e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, S2LP_PktWMbus.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPPktWMbusSetPostamble
</UL>

<P><STRONG><a name="[26a]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[262]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[26d]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
